function unitStep(x) {
    if (x < 0) {
        return 0;
    } else if (x >= 0) {
        return 1;
    }
}


// For our purposes, a valid date string
// is a string that contains at least year-month-day
// and can be parsed into a valid date object
// This is so we can mix dates and offsets
// when we sort and plot the dose table.
function isValidDateString(dateString) {
    if (typeof dateString !== 'string') {
        return false;
    }
    let date = new Date(dateString);
    if (isNaN(date)) {
        return false;
    }
    let dateParts = dateString.split('-');
    return dateParts.length >= 3;
}

function findEarliestDate(dates) {
    return dates.reduce((earliest, current) => {
        let current_date = isNaN(current) ? new Date(current) : new Date(earliest.getTime() + current * 24 * 60 * 60 * 1000);
        return current_date < earliest ? current_date : earliest;
    }, new Date());
}

function transformToDayOffsets(dates) {
    let earliestDate = findEarliestDate(dates);
    return dates.map(date => {
        if (!isValidDateString(date)) {
            return date;
        }
        let currentDate = new Date(date);
        let differenceInTime = currentDate.getTime() - earliestDate.getTime();
        return differenceInTime / (1000 * 3600 * 24);  // Convert milliseconds to days
    });
}

function sortDatesAndOffsets(dates) {
    let offsets = transformToDayOffsets(dates);
    return dates
        .map((date, index) => ({ date, offset: offsets[index] }))
        .sort((a, b) => a.offset - b.offset)
        .map(item => item.date);
}

function isArraySorted(arr) {
    for(let i = 0; i < arr.length - 1; i++) {
        if(arr[i] > arr[i + 1]) {
            return false;
        }
    }
    return true;
}


function getMonospaceWidth() {
    let element = document.createElement('pre');
    element.style.position = 'absolute';
    element.style.left = '-9999px';
    element.style.fontFamily = 'monospace';
    element.textContent = '_';  // 'm' is often used because it's wide
    document.body.appendChild(element);

    // Measure the width of a single monospace character
    let charWidth = element.getBoundingClientRect().width;

    // Remove the off-screen element
    document.body.removeChild(element);

    let regionWidth = document.getElementById('e2d3-plot').clientWidth;

    // Calculate and log the width of the window in monospace characters
    return Math.floor(regionWidth / charWidth);
}

function attachTipJarEvent() {
    document.getElementById('copy-xmr').addEventListener('mousedown', function() {
        navigator.clipboard.writeText(this.innerText);

        document.getElementById('tipjar-text').innerHTML = 'xmr tip jar address copied, thank you!';

        setTimeout(() => {
            document.getElementById('tipjar-text').innerHTML = 'xmr tip jar';
        }, 350);

        changeBackgroundColor('copy-xmr', colorLightForeground(), null, 150);
    });
}

// <!-- <br>
// <p><span id="tipjar-text">xmr tip jar</span><br><span
//         id="copy-xmr">85pzJGdG6PF9XtH7hAPd5g54yxFkcTCfkednKYPyAUjBZJYrao3qgBF4ftHg4hkKXqgvohjiJgxn7NHMPaCBse7AAFQe4B6</span>
// </p> -->


export function e2SingleDoseAUC3C(t, dose, d, k1, k2, k3) {
    if (t < 0) {
        return 0;
    }

    if (k1 == k2 && k2 == k3) {

        return dose * d / k1 * (1 - Math.exp(-k1 * t) * (1 + k1 * t + k1 * k1 * t * t / 2));

    } else if (k1 == k2 && k2 != k3) {

        return dose * d * k1 * k1 / (k1 - k3) / (k1 - k3) * ((1 - Math.exp(-k3 * t)) / k3 - 2 / k1 + k3 / k1 / k1 + Math.exp(-k1 * t) * (2 * k1 - k3 + k1 * (k1 - k3) * t) / k1 / k1);

    } else if (k1 != k2 && k1 == k3) {

        // missing because I got distracted

    } else if (k1 != k3 && k2 == k3) {

        // missing

    } else {
        return dose * d * k1 * k2 * ((1 - Math.exp(-k1 * t)) / k1 / (k1 - k2) / (k1 - k3) - (1 - Math.exp(-k2 * t)) / k2 / (k1 - k2) / (k2 - k3) + (1 - Math.exp(-k3 * t)) / k3 / (k1 - k3) / (k2 - k3));
    }
} 



function changeBackgroundColor(elementId, color1, color2, delay = 100) {
    let element = document.getElementById(elementId);
    element.style.backgroundColor = color1;

    setTimeout(() => {
        element.style.backgroundColor = color2;
    }, delay);
}



// SVG export stuff
document.getElementById('savesvg-button').addEventListener('mousedown', () => {
    let svg = document.getElementById('plot-region').querySelector('svg');
    let svgBlob = new Blob([svg.outerHTML], {type: 'image/svg+xml'});
    let svgURL = URL.createObjectURL(svgBlob);
    let downloadLink = document.createElement('a');
    downloadLink.href = svgURL;
    downloadLink.download = 'estrannaise-plot.svg';
    downloadLink.click();
    document.body.removeChild(downloadLink);
});

<button id="savesvg-button" class="flat-button element-reflow"
title="Save the current plot as an SVG file">
save svg
</button>

